local common = {}
FUEL_SLOT = 16
direction = "north"
x = 0
y = 0
z = 0

function reFuel()
    local fuelLevel = turtle.getFuelLevel()
    if fuelLevel < 100 then
        turtle.select(FUEL_SLOT)
        turtle.refuel(1)
    end
end

function toBoolean(str)
  local bool = false
  if str == "true" then
      bool = true
  end
  return bool
end

function splitStr(inputstr, sep)
  if sep == nil then
          sep = "%s"
  end
  local t={}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
          table.insert(t, str)
  end
  return t
end

function turnLeft()
    if direction == "north" then
        direction = "west"
    elseif direction == "west" then
        direction = "south"
    elseif direction == "south" then
        direction = "east" 
    else
        direction = "north" 
    end
    turtle.turnLeft()
end

function turnRight()
    if direction == "north" then
        direction = "east"
    elseif direction == "east" then
        direction = "south" 
    elseif direction == "south" then
        direction = "west" 
    else
        direction = "north" 
    end
    turtle.turnRight()
end

function forward()
    if direction == "north" then 
        z = z + 1
    elseif direction == "south" then
        z = z - 1
    elseif direction == "east" then
        x = x + 1
    else 
        x = x - 1
    end
    turtle.forward()
end

function backward()
    if direction == "north" then 
        z = z - 1
    elseif direction == "south" then
        z = z + 1
    elseif direction == "east" then
        x = x - 1
    else 
        x = x + 1
    end
    turtle.back()
end

function up()
    y = y + 1
    turtle.up()
end

function down()
    y = y - 1
    turtle.down()
end

function setDirection(directionF)
    --print("Turning to " .. directionF .. " currently " .. direction)
    if direction == "north" then
        if directionF == "south" then
            turnRight()
            turnRight()
        elseif directionF == "west" then
            turnLeft()
        elseif directionF == "east" then
            turnRight()
        else 
            return
        end
    elseif direction == "south" then
        if directionF == "north" then
            turnRight()
            turnRight()
        elseif directionF == "west" then
            turnRight()
        elseif directionF == "east" then
            turnLeft()
        else 
            return
        end
    elseif direction == "east" then
        if directionF == "west" then
            turnRight()
            turnRight()
        elseif directionF == "north" then
            turnLeft()
        elseif directionF == "south" then
            turnRight()
        else 
            return
        end
    else 
        if directionF == "east" then
            turnRight()
            turnRight()
        elseif directionF == "south" then
            turnLeft()
        elseif directionF == "north" then
            turnRight()
        else 
            return
        end
    end
end

function gpsInit()
    x, y, z = gps.locate()
    print("My location: " .. x .. ", " .. y .. ", " .. z)
end

function navigate(xF,yF,zF)
    -- Navigate y 
    local yDis = yF - y;
    if yDis > 0 then
        print("Moving up " .. yDis)
        for i=yDis,1,-1 do
            up()
        end
    else 
        print("Moving down " .. yDis)
        for i=yDis,-1,1 do
            down()
        end
    end
    setDirection("north")
    -- Navigate z
    local zDis = zF - z
    if zDis > 0 then
        print("Moving north " .. zDis)
        for i=zDis,1,-1 do
            print("Moving forward ")
            forward()
        end
    else 
        print("Moving south " .. zDis)
        for i=zDis,-1,1 do
            print("Moving backward ")
            backward()
        end
    end
    setDirection("east")
    -- Navigate x
    local xDis = xF - x
    if xDis > 0 then
        print("Moving east " .. xDis)
        for i=xDis,1,-1 do
            print("Moving forward ")
            forward()
        end
    else 
        print("Moving west " .. xDis)
        for i=xDis,-1,1 do
            print("Moving backward ")
            backward()
        end
    end
end

return common